stages:
  - build
  - deploy
  - sync
  - database
.setting-ssh-dev: &setting-ssh-dev |
  eval $(ssh-agent -s) && echo "$DEV_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config
.setting-ssh-phase2: &setting-ssh-phase2 |
  eval $(ssh-agent -s) && echo "$PHASE2_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config

########################DEV#################################
build_dev:
  stage: build
  script:
    - echo "${DEV_ENV}" > .env
    #- npm install
    #- npm run generate
    - yarn install
    #- yarn add nuxt
    - yarn generate

  artifacts:
    paths:
      - dist/
  tags:
    - dev
  only:
    - develop
  when: on_success

sync2batch_sns_dev:
  stage: sync
  cache: {}
  script:
    - *setting-ssh-dev
    - ssh -ttttttttttt $DEV_DEPLOY_USER@$DEV_BATCH_HOST "sudo chown -R $DEV_DEPLOY_USER:$DEV_DEPLOY_USER $DEV_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $DEV_DEPLOY_USER@$DEV_BATCH_HOST:$DEV_DEPLOY_DIR/
    - ssh -ttttttttttt $DEV_DEPLOY_USER@$DEV_BATCH_HOST "sudo chown -R nginx:nginx $DEV_DEPLOY_DIR/"
    - ssh -ttttttttttt $DEV_DEPLOY_USER@$DEV_BATCH_HOST  "sudo find $DEV_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $DEV_DEPLOY_USER@$DEV_BATCH_HOST  "sudo find $DEV_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_dev
  tags:
    - dev
  only:
    - develop
  when: on_success

######################## END DEV#################################
########################PHASE2#################################
build_phase2:
  stage: build
  script:
    - echo "${PHASE2_ENV}" > .env
    #- npm install
    #- npm run generate
    - yarn install
    #- yarn add nuxt
    - yarn generate

  artifacts:
    paths:
      - dist/
  tags:
    - dev
  only:
    - develop-phase2
  when: on_success

sync2batch_sns_phase2:
  stage: sync
  cache: {}
  script:
    - *setting-ssh-phase2
    - ssh -ttttttttttt $PHASE2_DEPLOY_USER@$PHASE2_BATCH_HOST "sudo chown -R $PHASE2_DEPLOY_USER:$PHASE2_DEPLOY_USER $PHASE2_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $PHASE2_DEPLOY_USER@$PHASE2_BATCH_HOST:$PHASE2_DEPLOY_DIR/
    - ssh -ttttttttttt $PHASE2_DEPLOY_USER@$PHASE2_BATCH_HOST "sudo chown -R nginx:nginx $PHASE2_DEPLOY_DIR/"
    - ssh -ttttttttttt $PHASE2_DEPLOY_USER@$PHASE2_BATCH_HOST  "sudo find $PHASE2_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $PHASE2_DEPLOY_USER@$PHASE2_BATCH_HOST  "sudo find $PHASE2_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_phase2
  tags:
    - dev
  only:
    - develop-phase2
  when: on_success

######################## END PHASE2#################################
.setting-ssh-stg: &setting-ssh-stg |
  eval $(ssh-agent -s) && echo "$STG_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config
.setting-ssh-stg-batch: &setting-ssh-stg-batch |
  eval $(ssh-agent -s) && echo "$STG_BATCH_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config


########################STG#################################
build_stg:
  stage: build
  script:
    - echo "${STG_ENV}" > .env
    #- npm install
    - export NODE_OPTIONS=--max_old_space_size=20480
    - yarn install
    #- yarn add nuxt
    - yarn generate

  artifacts:
    paths:
      - dist/
  tags:
    - stg
  only:
    - staging
  when: on_success
deploy_sns_stg:
  stage: deploy
  cache: {}
  script:
    - *setting-ssh-stg
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_HOST "sudo chown -R $STG_DEPLOY_USER:$STG_DEPLOY_USER $STG_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $STG_DEPLOY_USER@$STG_HOST:$STG_DEPLOY_DIR/
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_HOST "sudo chown -R nginx:nginx $STG_DEPLOY_DIR/"
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_HOST  "sudo find $STG_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_HOST  "sudo find $STG_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_stg
  tags:
    - stg
  only:
    - staging
  when: on_success

sync2batch_sns_stg:
  stage: sync
  cache: {}
  script:
    - *setting-ssh-stg-batch
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_BATCH_HOST "sudo chown -R $STG_DEPLOY_USER:$STG_DEPLOY_USER $STG_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $STG_DEPLOY_USER@$STG_BATCH_HOST:$STG_DEPLOY_DIR/
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_BATCH_HOST "sudo chown -R nginx:nginx $STG_DEPLOY_DIR/"
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_BATCH_HOST  "sudo find $STG_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $STG_DEPLOY_USER@$STG_BATCH_HOST  "sudo find $STG_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_stg
  tags:
    - stg
  only:
    - staging
  when: on_success

######################## END STG#################################
.setting-ssh-prd: &setting-ssh-prd |
  eval $(ssh-agent -s) && echo "$PRD_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config
.setting-ssh-prd-batch: &setting-ssh-prd-batch |
  eval $(ssh-agent -s) && echo "$PROD_BATCH_SSH_KEY" | ssh-add -
  mkdir -p ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\tControlMaster auto\n\tControlPath /tmp/ansible-%r@%h:%p\n\tControlPersist 15m\n\tPreferredAuthentications publickey
  \n\n" > ~/.ssh/config
  chmod go-wrx ~/.ssh
  chmod go-w ~/.ssh/config


########################PROD#################################
build_prod:
  stage: build
  script:
    - echo "${PRD_ENV}" > .env
    #- npm install
    #- npm run generate
    - export NODE_OPTIONS=--max_old_space_size=4096
    - yarn install
    #- yarn add nuxt
    - yarn generate

  artifacts:
    paths:
      - dist/
  tags:
    - prod
  only:
    - prod
  when: on_success
deploy_sns_prod:
  stage: deploy
  cache: {}
  script:
    - *setting-ssh-prd
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_HOST "sudo chown -R $PRD_DEPLOY_USER:$PRD_DEPLOY_USER $PRD_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $PRD_DEPLOY_USER@$PRD_HOST:$PRD_DEPLOY_DIR/
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_HOST "sudo chown -R nginx:nginx $PRD_DEPLOY_DIR/"
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_HOST  "sudo find $PRD_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_HOST  "sudo find $PRD_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_prod
  tags:
    - prod
  only:
    - prod
  when: on_success

sync2batch_sns_prod:
  stage: sync
  cache: {}
  script:
    - *setting-ssh-prd-batch
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_BATCH_HOST "sudo chown -R $PRD_DEPLOY_USER:$PRD_DEPLOY_USER $PRD_DEPLOY_DIR/"
    - rsync -c -alv --ignore-times --delete --exclude='.git' --exclude=storage/logs/ ./ $PRD_DEPLOY_USER@$PRD_BATCH_HOST:$PRD_DEPLOY_DIR/
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_BATCH_HOST "sudo chown -R nginx:nginx $PRD_DEPLOY_DIR/"
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_BATCH_HOST  "sudo find $PRD_DEPLOY_DIR/ -type d -exec chmod 755 -R {} \;"
    - ssh -ttttttttttt $PRD_DEPLOY_USER@$PRD_BATCH_HOST  "sudo find $PRD_DEPLOY_DIR/ -type f -exec chmod 644 {} \;"

  dependencies:
    - build_prod
  tags:
    - prod
  only:
    - prod
  when: on_success

######################## END PROD#################################
